# -*- coding: utf-8 -*-
"""Diabetes  prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AhGD6KQp0iryvyhslSCEd0MauI6NwLWU

diabetes data --> data pre processing -->train test split --> suport vector machine classifier -->new data

importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm # support vector machine
from sklearn.metrics import accuracy_score

"""data collection and analysis
//PIMA diabetes dataset
"""

#loading the diabetes dataset to a pandas dataframe
diabetes_dataset=pd.read_csv('/diabetes.csv')

pd.read_csv?

# printing first 5 rows of the dataset
diabetes_dataset.head()

# number of rows and columns in this dataset
diabetes_dataset.shape

#getting the statistical measure of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0--> Non diabetic
1--> diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

#seprating data and labels
X=diabetes_dataset.drop(columns='Outcome',axis=1)
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

"""data standardization"""

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data)

X=standardized_data
Y=diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train test split"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Training the model"""

classifier=svm.SVC(kernel='linear')

# training the support vector machine classifier
classifier.fit(X_train,Y_train)

"""Model evaluation

acccuracy score
"""

#accuracy score on the training data
X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print("acurracy score of training data")
print(training_data_accuracy)

#accurancy score on test data
X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print("acurracy score of test data")
print(test_data_accuracy)

"""Making a predictive system"""

input_data=(2,197,70,45,543,30.5,0.158,53)

#chaning the input_data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data=scaler.transform(input_data_reshaped)
print(std_data)

prediction=classifier.predict(std_data)
print(prediction)

if(prediction[0]==0):
    print("the person is not diabetic")
else:
    print("the person is diabetic")